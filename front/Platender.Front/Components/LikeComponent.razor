@using Platender.Front.Helpers
@using Platender.Front.Models.Enums

<MudIconButton
    Icon="@Icons.Material.Filled.ThumbUpOffAlt"
    OnClick="(() => HandleLikeButtonClick())"
    ButtonType="MudBlazor.ButtonType.Button"></MudIconButton>
<MudText Style="color: #0cff04">@_likeAmount</MudText>
<MudIconButton
    Icon="@Icons.Material.Filled.ThumbDownOffAlt" 
    OnClick="(() => HandleDislikeButtonClick())"
    ButtonType="MudBlazor.ButtonType.Button"></MudIconButton>
<MudText Style="color: #ff0000">@_dislikeAmount</MudText>

@code{
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public int? LikeAmount { get; set; }
    [Parameter]
    public int? DislikeAmount { get; set; }
    [Parameter]
    public EventCallback<Guid> LikeButtonAction { get; set; }
    [Parameter]
    public EventCallback<Guid> DislikeButtonAction { get; set; }  
    [Parameter]
    public string? UserReaction { get; set; }

    private int? _likeAmount;
    private int? _dislikeAmount;
    private bool _isLiked = false;
    private bool _isDisliked = false;

    protected override async Task OnParametersSetAsync()
    {
        _likeAmount = LikeAmount;
        _dislikeAmount = DislikeAmount;
        if(!string.IsNullOrWhiteSpace(UserReaction))
        {
            var reactionType = EnumHelper.MapStringToEnumOrNull<ReactionType>(UserReaction);
            if(reactionType is null)
            {
                return;
            }

            if(reactionType == ReactionType.Lik)
            {
                _isLiked = true;
            }
            else
            {
                _isDisliked = true;
            }
        }
    }

    private async Task HandleLikeButtonClick()
    {
        if(LikeButtonAction.HasDelegate)
        {
            await LikeButtonAction.InvokeAsync(Id);
            ToggleLike();
        }
    }

    private async Task HandleDislikeButtonClick()
    {
        if(DislikeButtonAction.HasDelegate)
        {
            await DislikeButtonAction.InvokeAsync(Id);
            ToggleDislike();
        }
    }

    private void ToggleLike()
    {            
        if (_isLiked)
        {
            _isLiked = false;
            _likeAmount--;

            return;
        }

        if (_isDisliked)
        {
            _isDisliked = false;
            _dislikeAmount--;

            return;
        }

        _isLiked = true;
        _likeAmount++;
    }
    
    private void ToggleDislike()
    {
        if (_isDisliked)
        {
            _isDisliked = false;
            _dislikeAmount--;

            return;
        }

        if (_isLiked)
        {
            _isLiked = false;
            _likeAmount--;

            return;
        } 

        _isDisliked = true;
        _dislikeAmount++;
    }
}