// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Platender.Application.EF;

#nullable disable

namespace Platender.Infrastructure.Migrations
{
    [DbContext(typeof(PlatenderDbContext))]
    [Migration("20240531194840_AddedUserFavouritePlates")]
    partial class AddedUserFavouritePlates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Platender.Core.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<Guid>("PlateId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Platender.Core.Models.CommentsLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LikeType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("UserIPAddress")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentsLike");
                });

            modelBuilder.Entity("Platender.Core.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EventAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Latitude")
                        .HasPrecision(5)
                        .HasColumnType("float");

                    b.Property<float>("Longtitude")
                        .HasPrecision(5)
                        .HasColumnType("float");

                    b.Property<float>("TimeZone")
                        .HasPrecision(2)
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("varchar(63)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Platender.Core.Models.EventUser", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("eventUser");
                });

            modelBuilder.Entity("Platender.Core.Models.Plate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Culture")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.ToTable("plates");
                });

            modelBuilder.Entity("Platender.Core.Models.PlateLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("LikeType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<Guid>("PlateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserIPAddress")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("PlateId");

                    b.ToTable("PlateLike");
                });

            modelBuilder.Entity("Platender.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("varchar(31)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Platender.Core.Models.UserFavouritePlates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlateId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavouritePlates");
                });

            modelBuilder.Entity("Platender.Core.Models.Comment", b =>
                {
                    b.HasOne("Platender.Core.Models.Plate", "Plate")
                        .WithMany("Comments")
                        .HasForeignKey("PlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platender.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Platender.Core.Models.CommentsLike", b =>
                {
                    b.HasOne("Platender.Core.Models.Comment", "Comment")
                        .WithMany("CommentLike")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Platender.Core.Models.Event", b =>
                {
                    b.HasOne("Platender.Core.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Platender.Core.Models.EventUser", b =>
                {
                    b.HasOne("Platender.Core.Models.Event", "Event")
                        .WithMany("Participators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platender.Core.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Platender.Core.Models.PlateLike", b =>
                {
                    b.HasOne("Platender.Core.Models.Plate", "Plate")
                        .WithMany("PlateLikes")
                        .HasForeignKey("PlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("Platender.Core.Models.UserFavouritePlates", b =>
                {
                    b.HasOne("Platender.Core.Models.Plate", "Plate")
                        .WithMany("UserFavouritePlates")
                        .HasForeignKey("PlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platender.Core.Models.User", "User")
                        .WithMany("favouritePlates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Platender.Core.Models.Comment", b =>
                {
                    b.Navigation("CommentLike");
                });

            modelBuilder.Entity("Platender.Core.Models.Event", b =>
                {
                    b.Navigation("Participators");
                });

            modelBuilder.Entity("Platender.Core.Models.Plate", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PlateLikes");

                    b.Navigation("UserFavouritePlates");
                });

            modelBuilder.Entity("Platender.Core.Models.User", b =>
                {
                    b.Navigation("EventUsers");

                    b.Navigation("favouritePlates");
                });
#pragma warning restore 612, 618
        }
    }
}
